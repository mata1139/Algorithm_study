'''
문제 설명
N개의 마을로 이루어진 나라가 있습니다. 이 나라의 각 마을에는 1부터 N까지의 번호가 각각 하나씩 부여되어 있습니다. 각 마을은 양방향으로 통행할 수 있는 도로로 연결되어 있는데, 서로 다른 마을 간에 이동할 때는 이 도로를 지나야 합니다. 도로를 지날 때 걸리는 시간은 도로별로 다릅니다. 현재 1번 마을에 있는 음식점에서 각 마을로 음식 배달을 하려고 합니다. 각 마을로부터 음식 주문을 받으려고 하는데, N개의 마을 중에서 K 시간 이하로 배달이 가능한 마을에서만 주문을 받으려고 합니다. 다음은 N = 5, K = 3인 경우의 예시입니다.


위 그림에서 1번 마을에 있는 음식점은 [1, 2, 4, 5] 번 마을까지는 3 이하의 시간에 배달할 수 있습니다. 그러나 3번 마을까지는 3시간 이내로 배달할 수 있는 경로가 없으므로 3번 마을에서는 주문을 받지 않습니다. 따라서 1번 마을에 있는 음식점이 배달 주문을 받을 수 있는 마을은 4개가 됩니다.
마을의 개수 N, 각 마을을 연결하는 도로의 정보 road, 음식 배달이 가능한 시간 K가 매개변수로 주어질 때, 음식 주문을 받을 수 있는 마을의 개수를 return 하도록 solution 함수를 완성해주세요.

제한사항
마을의 개수 N은 1 이상 50 이하의 자연수입니다.
road의 길이(도로 정보의 개수)는 1 이상 2,000 이하입니다.
road의 각 원소는 마을을 연결하고 있는 각 도로의 정보를 나타냅니다.
road는 길이가 3인 배열이며, 순서대로 (a, b, c)를 나타냅니다.
a, b(1 ≤ a, b ≤ N, a != b)는 도로가 연결하는 두 마을의 번호이며, c(1 ≤ c ≤ 10,000, c는 자연수)는 도로를 지나는데 걸리는 시간입니다.
두 마을 a, b를 연결하는 도로는 여러 개가 있을 수 있습니다.
한 도로의 정보가 여러 번 중복해서 주어지지 않습니다.
K는 음식 배달이 가능한 시간을 나타내며, 1 이상 500,000 이하입니다.
임의의 두 마을간에 항상 이동 가능한 경로가 존재합니다.
1번 마을에 있는 음식점이 K 이하의 시간에 배달이 가능한 마을의 개수를 return 하면 됩니다.
입출력 예
N	road	K	result
5	[[1,2,1],[2,3,3],[5,2,2],[1,4,2],[5,3,1],[5,4,2]]	3	4
6	[[1,2,1],[1,3,2],[2,3,2],[3,4,3],[3,5,2],[3,5,3],[5,6,1]]	4	4
입출력 예 설명
입출력 예 #1
문제의 예시와 같습니다.

입출력 예 #2
주어진 마을과 도로의 모양은 아래 그림과 같습니다.

1번 마을에서 배달에 4시간 이하가 걸리는 마을은 [1, 2, 3, 5] 4개이므로 4를 return 합니다.
'''


import heapq as hq

def solution(N, road, K):
    
    distance = [500001 for i in range(N+1)] # 최대 시간은 500,000
    distance[1] = 0                         # 시작 마을의 걸리는 시간은 0,
      
    que = []                                
    hq.heappush(que,(0,1))                  # 힙큐 선언 후, (걸리는 시간,마을번호) 형식으로 삽입
                                            # 걸리는 시간을 기준으로 자동으로 정렬 시키기 위함,
        
    while que:                              # 큐가 비어있지 않는 동안,
       
        dis,where = hq.heappop(que)         # 거리와, 마을 번호를 pop하여 받아옴,
        
        if distance[where] < dis:           # 거리가 갱신 되지 않는다면, pass
            continue
            
        else:                               # 거리가 갱신 될 수 있다면,
            
            
            for start,end,value in road:    # road를 순회하면서,
                
                if start == where:          # 마을 출발점이 같으면,
                    
                    new_dis = dis + value   # 경유 거리 = 이전 거리 + 새로운 거리
                    
                    if new_dis < distance[end]: # 경유 거리가 현재 거리보다 작다면,
                        
                        distance[end] = new_dis # distance 갱신,
                        hq.heappush(que,(new_dis,end)) # que에 추가,
                
                elif end == where:          # 마을 도착점이 같다면,
                    
                                            # 출발점 도착점을 나누는 이유는, road의 입력값인 도로가 한번만 나오기 때문,
                                            # 출발점을 기준으로 할지, 도착점을 기준으로 하여 값이 주어질지 모르기 때문,
                        
                    new_dis = dis + value   # 위와 같음,
                    if new_dis < distance[start]:
                        distance[start] = new_dis
                        hq.heappush(que,(new_dis,start))
                        

    return len([i for i in distance if i <= K ]) # 최종 갱신되 distance에서 K보다 작은 마을의 개수 출력,
